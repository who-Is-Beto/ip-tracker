{"version":3,"sources":["types/enums.ts","store/Context.tsx","components/Data.tsx","utils/getData.ts","components/Input.tsx","components/Map.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["EActions","initialState","ip","location","country","region","city","lat","NaN","lng","postalCode","timezone","geonameId","domains","as","asn","name","route","domain","type","isp","proxy","vpn","tor","StoreContext","createContext","state","dispatch","StoreReducer","action","GET_IP","payload","StoreProvider","children","useReducer","Provider","value","Data","useContext","className","fetchData","test","fetch","then","response","json","data","catch","error","Swal","fire","title","text","icon","confirmButtonText","Input","useState","setValue","handleClick","a","ipData","useEffect","placeholder","onChange","event","target","onClick","containerStyle","width","height","bottom","MyComponent","center","googleMapsApiKey","mapContainerStyle","zoom","position","React","memo","App","useQuery","isLoading","Map","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","queryClient","QueryClient","ReactDOM","render","QueryClientProvider","client","document","getElementById"],"mappings":"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","file":"static/js/main.c0566a39.chunk.js","sourcesContent":["export enum EActions {\n  GET_IP = \"GET_IP\",\n}\n","import React, { createContext, useReducer } from \"react\";\nimport { EActions } from \"../types/enums\";\nimport { ActionTypesType, InitialStateType, ipActions } from \"../types/types\";\n\nconst initialState = {\n  ip: {\n    ip: \"8.8.8.8\",\n    location: {\n      country: \"\",\n      region: \"\",\n      city: \"\",\n      lat: NaN,\n      lng: NaN,\n      postalCode: \"\",\n      timezone: NaN,\n      geonameId: NaN,\n    },\n    domains: [\"\", \"\", \"\", \"\", \"\"],\n    as: {\n      asn: NaN,\n      name: \"\",\n      route: \"\",\n      domain: \"\",\n      type: \"\",\n    },\n    isp: \"\",\n    proxy: {\n      proxy: false,\n      vpn: false,\n      tor: false,\n    },\n  },\n};\n\nconst StoreContext = createContext<{\n  state: InitialStateType;\n  dispatch: React.Dispatch<ipActions>;\n}>({\n  state: initialState,\n  dispatch: () => null,\n});\n\nconst StoreReducer: React.Reducer<InitialStateType, ActionTypesType> = (\n  state,\n  action\n) => {\n  switch (action.type) {\n    case EActions.GET_IP:\n      return {\n        ...state,\n        ip: action.payload,\n      };\n  }\n};\n\nconst StoreProvider: React.FC = ({ children }) => {\n  const [state, dispatch] = useReducer(StoreReducer, initialState);\n\n  return (\n    <StoreContext.Provider value={{ state, dispatch }}>\n      {children}\n    </StoreContext.Provider>\n  );\n};\n\nexport { StoreContext, StoreProvider };\n","import { useContext } from \"react\";\nimport { StoreContext } from \"../store/Context\";\nimport \"../styles/Data.css\";\n\nconst Data = () => {\n  const { state } = useContext(StoreContext);\n\n  return (\n    <div className=\"data-container\">\n      <div className=\"data-info\">\n        <small>Ip address</small>\n        <h4>{state.ip.ip}</h4>\n      </div>\n      <div className=\"data-info\">\n        <small>Location</small>\n        <h4>{state.ip.location.region}</h4>\n      </div>\n      <div className=\"data-info\">\n        <small>Time zone</small>\n        <h4>{`UTC \n        ${state.ip.location.timezone}`}</h4>\n      </div>\n      <div className=\"data-info\">\n        <small>ISP</small>\n        <h4>{state.ip.isp}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default Data;\n","import fetch from \"node-fetch\";\nimport Swal from \"sweetalert2\";\n\nconst fetchData = (ip: string) => {\n  const regexExp =\n    /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/gi;\n  if (regexExp.test(ip) || ip === \"\") {\n    return fetch(\n      `https://geo.ipify.org/api/v1?apiKey=at_hDYDIDdHjJm5uy0GepjjjDLmuGkaT&ipAddress=${ip}`\n    )\n      .then((response) => response.json())\n      .then((data) => data)\n      .catch((error) => error);\n  } else {\n    Swal.fire({\n      title: \"Error!\",\n      text: \"Please introduce a good IP address format, I'll take you to Google...\",\n      icon: \"error\",\n      confirmButtonText: \"Ok :c\",\n    });\n    return {\n      ip: \"8.8.8.8\",\n      location: {\n        country: \"US\",\n        region: \"California\",\n        city: \"Mountain View\",\n        lat: 37.38605,\n        lng: -122.08385,\n        postalCode: \"94035\",\n        timezone: \"-07:00\",\n        geonameId: 5375480,\n      },\n      domains: [\n        \"0--9.ru\",\n        \"000.lyxhwy.xyz\",\n        \"000180.top\",\n        \"00049ok.com\",\n        \"000xs.net\",\n      ],\n      as: {\n        asn: 15169,\n        name: \"Google LLC\",\n        route: \"8.8.8.0/24\",\n        domain: \"https://about.google/intl/en/\",\n        type: \"Content\",\n      },\n      isp: \"Google LLC\",\n      proxy: {\n        proxy: false,\n        vpn: false,\n        tor: false,\n      },\n    };\n  }\n};\n\nconst fetchInitialData = async () => {\n  return await fetch(`https://api.ipify.org/?format=json`)\n    .then((response) => response.json())\n    .then((data) => data)\n    .catch((error) => alert(error));\n};\n\nexport { fetchData, fetchInitialData };\n","/* eslint-disable react-hooks/exhaustive-deps */\nimport React, { ChangeEvent, useContext, useEffect, useState } from \"react\";\nimport { FaLocationArrow } from \"react-icons/fa\";\nimport { StoreContext } from \"../store/Context\";\nimport \"../styles/Input.css\";\nimport { EActions } from \"../types/enums\";\nimport { fetchData } from \"../utils/getData\";\n\nconst Input = () => {\n  const [value, setValue] = useState(\"\");\n  const { dispatch } = useContext(StoreContext);\n\n  const handleChangeInputValue = (event: ChangeEvent<HTMLInputElement>) => {\n    setValue(event.target.value);\n  };\n\n  const handleClick = async () => {\n    const ipData = await fetchData(value);\n    dispatch({\n      type: EActions.GET_IP,\n      payload: ipData,\n    });\n  };\n\n  useEffect(() => {\n    handleClick();\n  }, []);\n\n  return (\n    <div className=\"info-container\">\n      <div className=\"input-container\">\n        <input\n          className=\"input\"\n          type=\"ip\"\n          value={value}\n          placeholder=\"Your IP\"\n          onChange={handleChangeInputValue}\n        />\n        <button onClick={handleClick} className=\"input-btn\">\n          {\" \"}\n          <FaLocationArrow className=\"btn-icon\" />{\" \"}\n        </button>\n      </div>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { useContext } from \"react\";\nimport { GoogleMap, LoadScript, Marker } from \"@react-google-maps/api\";\nimport { StoreContext } from \"../store/Context\";\n\nconst containerStyle = {\n  width: \"100%\",\n  height: \"70vh\",\n  bottom: \"0rem\",\n};\n\nfunction MyComponent() {\n  const { state } = useContext(StoreContext);\n\n  const center = {\n    lat: state.ip.location.lat,\n    lng: state.ip.location.lng,\n  };\n  return (\n    <LoadScript googleMapsApiKey=\"AIzaSyAmcEWw0e7tn-vXuuOpOYn1L457GBe4OtY\">\n      <GoogleMap mapContainerStyle={containerStyle} center={center} zoom={10}>\n        <Marker position={center} />\n      </GoogleMap>\n    </LoadScript>\n  );\n}\n\nexport default React.memo(MyComponent);\n","import Data from \"./components/Data\";\nimport Input from \"./components/Input\";\nimport Map from \"./components/Map\";\nimport { useQuery } from \"react-query\";\nimport { StoreContext, StoreProvider } from \"./store/Context\";\nimport { fetchData } from \"./utils/getData\";\nimport { useContext } from \"react\";\nimport { EActions } from \"./types/enums\";\n\nfunction App() {\n  const { dispatch } = useContext(StoreContext);\n\n  const { isLoading, error } = useQuery(\"InitialFetch\", () => {\n    fetch(\"https://api.ipify.org/?format=json\")\n      .then((response) => response.json())\n      .then(async (data) => {\n        const ipData = await fetchData(data.ip);\n        dispatch({\n          type: EActions.GET_IP,\n          payload: ipData,\n        });\n        return ipData;\n      });\n  });\n\n  return (\n    <StoreProvider>\n      {error && <h1>An error occurred</h1>}\n      <div className=\"app\">\n        {isLoading ? (\n          <h1>LOADING...</h1>\n        ) : (\n          <>\n            <div className=\"content\">\n              <h2>IP Adress Tracker</h2>\n              <Input />\n              <Data />\n            </div>\n            <Map />\n          </>\n        )}\n      </div>\n    </StoreProvider>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { QueryClient, QueryClientProvider } from \"react-query\";\nimport { StoreProvider } from \"./store/Context\";\n\nconst queryClient = new QueryClient();\n\nReactDOM.render(\n  <StoreProvider>\n    <QueryClientProvider client={queryClient}>\n      <App />\n    </QueryClientProvider>\n  </StoreProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}